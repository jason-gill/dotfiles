# Include this in your own .gitconfig by using the
# [include] directive with the path to this file
#
# [include]
#    path = ~/.gitconfig.alias
#
# If you don't have any existing includes, you can add this via the following command
# 
#   git config --global include.path ~/.gitconfig.aliases
#

[alias]
    alias = "!git config -l | grep ^alias\\. | cut -c 7-"

# basics
# -----------------------
    cl = clone
    co = checkout
    cp = cherry-pick

# Commit
# -----------------------
    cm = commit -m
    save = !git add -A && git commit -m                                                 # Save all current work
    savept = !git add -A && git commit --no-edit --squash `git rev-parse HEAD`          # Save all addtional work that can be sqaushed into previous commit
    wip = commit -am "WIP"
    basecm = !git merge-base origin/master `git currentbr`                              # Get base commit for rebase

# Pull
# -----------------------
    pl = pull
    plr = pull --rebase
    plom = pull origin master

# Push
# -----------------------
    pu = push
    puf = push --force
    puo = !git push origin `git branch --show-current`
    puso = !git push --set-upstream origin `git branch --show-current`

# Rebase
# -----------------------
    rb = !git rebase -i --autosquash `git basecm`                                       # Start rebase from base commit
    rbc = "!f(){ git add -A && git rebase --continue; }; f"                             # Include all changes and contine rebase
    rba = rebase --abort

# Reset / Undo
# -----------------------
    undo = reset --mixed HEAD~1                                                         # Unstage your last commit
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard    # Create a save point before nuking changes.  This can be recovered later using 'git reflog'
    discardall = checkout -- .                                                          # !!!Nuke Changes Now!!!

# Branch
# -----------------------
    b = branch -vv
    br = branch -vv
    brrm = branch -d                                                                    # Remove branch
    brrmf = branch -D                                                                   # Force remove branch
    cob = checkout -b
    com = checkout master
    currentbr = !git branch --show-current
    master = !git checkout master && git pull origin
    brstorm = "!f() { git branch -vv | grep ': gone]'; }; f"                            # List deleted remote branches
    rmdeadbrs = "!f() { git brstorm | awk '{print $1;}' | xargs -r git branch -D; }; f" # Remove deleted remote branches

    coub = "!f() { git checkout -b users/jason.gill/$1; }; f"
    corb = "!f() { git checkout -b features/$1; }; f"
    cofb = "!f() { git checkout -b releases/$1; }; f"

# Search
# -----------------------
    find = "!git ls-files | grep -i"
    gr = grep -Ii
    grep = grep -Ii

# Reports
# -----------------------
    s = status --short --branch
    st = status
    l = log --pretty=format:'%C(auto)%h %d %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --max-count=25
    ll = log --pretty=format:'%C(auto)%h %d %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    llmine = log --pretty=format:'%C(auto)%h %d %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --author='Jason Gill'
    lc = log --stat --summary
    lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'
